//********************************
//* Autor : Carmelo Salafia      *
//* eMail : cswi@gmx.de          *
//* Datum : 10.08.2005           *
//********************************


import VisualLogic.*;
import VisualLogic.variables.*;
import tools.*;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.text.*;
import java.awt.geom.Rectangle2D;

public class Const extends JVSMain
{
  private int pw=7;  // Pin Width
  private int width, height;
  private VSDouble constValue=new VSDouble(0.0);
  private Graphics2D g2;
  private Font fnt = new Font("Courier",0,12);
  private DecimalFormat df = new DecimalFormat("#,##0.00" );
  private VSDouble out= new VSDouble();
  private boolean changed=false;
  
  
  public Const()
  {
    width=48;
    height=25;
  }

   public void resizeWidth()
   {
       g2.setFont(fnt);
       String caption="C_"+constValue.getValue();
       FontMetrics fm = g2.getFontMetrics();
       Rectangle2D   r = fm.getStringBounds(df.format(constValue.getValue()),g2);
       int newWidth=(int)r.getWidth()+20;
       int diff=(width-newWidth);
       element.jSetSize(newWidth,height);
       element.jSetLeft(element.jGetLeft()+diff);
       width=newWidth;
   }

   public void paint(java.awt.Graphics g)
   {
    if (element!=null)
    {
       g2=(Graphics2D)g;
       Rectangle bounds=element.jGetBounds();
       g2.setFont(fnt);
       g2.setColor(Color.black);

       String caption="C_"+constValue.getValue();
       FontMetrics fm = g2.getFontMetrics();
       Rectangle2D   r = fm.getStringBounds(df.format(constValue.getValue()),g2);

       g.drawString(df.format(constValue.getValue()),bounds.x+5,((bounds.height) /2)+5);
       g.drawRect(bounds.x,bounds.y,bounds.width-1,bounds.height-1);
    }
   }

  public void init()
  {
    initPins(0,1,0,0);
    setSize(width,height);

    element.jSetInnerBorderVisibility(false);
    element.jSetTopPinsVisible(false);
    element.jSetLeftPinsVisible(false);
    element.jSetBottomPinsVisible(false);

    setPin(0,ExternalIF.C_DOUBLE,element.PIN_OUTPUT);
    element.jSetPinDescription(0,"Out");
    setName("Const");
  }
  

  public void initInputPins()
  {
  }

  public void initOutputPins()
  {
    element.setPinOutputReference(0,out);
  }




  public void setPropertyEditor()
  {
    element.jAddPEItem("Value",constValue, Double.MIN_VALUE,Double.MAX_VALUE);
  }

  public void propertyChanged(Object o)
  {
    resizeWidth();
    element.jRepaint();
  }

  public void start()
  {
    changed=true;
  }
  
  public void process()
  {
    if (changed)
    {
      changed=false;
      out.setValue(constValue.getValue());
      out.setChanged(true);
    } else out.setChanged(false);
  }
  
  
  public void loadFromStream(java.io.FileInputStream fis)
  {
      constValue.loadFromStream(fis);
  }

  public void saveToStream(java.io.FileOutputStream fos)
  {
      constValue.saveToStream(fos);
  }



}

