

import VisualLogic.*;
import VisualLogic.variables.*;
import tools.*;

import java.awt.*;
import java.awt.event.*;
import java.text.*;
import java.awt.geom.Rectangle2D;
import java.util.Random;


import javax.swing.*;
import java.io.*;
import javax.sound.sampled.*;


public class AudioIn extends JVSMain
{
  private VSGroup in;
  private VSGroup out = new VSGroup();
  private VS1DDouble outX = new VS1DDouble(8000);
  private VS1DDouble outY = new VS1DDouble(8000);
  
  private VSDouble zoomX;
  private VSDouble zoomY;

  private Image image;
  
  
  private double value=0.0;
  private double oldValue=0.0;

  private boolean stopCapture = false;
  private ByteArrayOutputStream byteArrayOutputStream;
  private AudioFormat audioFormat;
  private TargetDataLine targetDataLine=null;
  private AudioInputStream audioInputStream;
  private SourceDataLine sourceDataLine;
  
  int buffLen=2000;
  private byte tempBuffer[] = new byte[buffLen];
  int cnt=0;
  

  public void onDispose()
  {
    stopCapture=true;
    if (image!=null)
    {
      image.flush();
      image=null;
    }
  }

  
  private AudioFormat getAudioFormat()
  {
    float sampleRate = 22050.0F;
    //8000,11025,16000,22050,44100
    int sampleSizeInBits = 8;
    //8,16
    int channels = 1;
    //1,2
    boolean signed = true;
    //true,false
    boolean bigEndian = false;
    //true,false
    return new AudioFormat(sampleRate,sampleSizeInBits,channels,signed,bigEndian);

  }//end getAudioFormat

  private void captureAudio()
  {
    try{
      //Get everything set up for capture

      audioFormat = getAudioFormat();
      DataLine.Info dataLineInfo =new DataLine.Info(TargetDataLine.class,audioFormat);
      targetDataLine = (TargetDataLine)AudioSystem.getLine(dataLineInfo);
      targetDataLine.open(audioFormat);
      targetDataLine.start();

      // Create a thread to capture the
      // microphone data and start it
      // running.  It will run until
      // the Stop button is clicked.
      //Thread captureThread =new Thread(new CaptureThread());
      //captureThread.start();

    } catch (Exception e)
    {
      System.out.println(e);
      System.exit(0);
    }//end catch
  }//end captureAudio method

  
  
//Inner class to capture data from
// microphone
class CaptureThread extends Thread
{
  //An arbitrary-size temporary holding
  // buffer


  public void run()
  {
    byteArrayOutputStream =new ByteArrayOutputStream();
    stopCapture = false;
    try{//Loop until stopCapture is set
        // by another thread that
        // services the Stop button.
      while(!stopCapture)
      {
        //Read data from the internal
        // buffer of the data line.
        byteArrayOutputStream.reset();
        
        cnt = targetDataLine.read(tempBuffer,0,tempBuffer.length);
        /*if(cnt > 0)
        {
          //Save data in output stream
          // object.
          byteArrayOutputStream.write(tempBuffer, 0, cnt);
        }//end if*/
      }//end while
      byteArrayOutputStream.close();

    }catch (Exception e) {
      System.out.println(e);
      System.exit(0);
    }//end catch
  }//end run
}//end inner class CaptureThread
//===================================//

  
  public AudioIn()
  {
    outX= new VS1DDouble(buffLen);
    outY= new VS1DDouble(buffLen);
  }

  public void paint(java.awt.Graphics g)
  {
   if (element!=null)
    {
       Rectangle r=element.jGetBounds();
       g.drawImage(image,r.x,r.y,r.width,r.height,null);
    }
  }

  public void init()
  {
  
    initPins(0,1,0,2);
    setSize(50,50);

    element.jSetInnerBorderVisibility(true);


    String fileName=element.jGetSourcePath()+"XAudioIn.GIF";
    System.out.println("imageFileName="+fileName);
    image=element.jLoadImage(fileName);

    
    setPin(0,ExternalIF.C_GROUP,element.PIN_OUTPUT);

    setPin(1,ExternalIF.C_DOUBLE,element.PIN_INPUT);
    setPin(2,ExternalIF.C_DOUBLE,element.PIN_INPUT);
    
    
    element.jSetPinDescription(0,"Out");
    element.jSetPinDescription(1,"zoomX");
    element.jSetPinDescription(2,"zoomY");

    element.jSetResizable(false);
    element.jSetCaptionVisible(true);
    element.jSetCaption("audio-in");

    // Für den Degruppierer (Nur für den Datentyp)
    out.list.clear();
    out.list.add(outX);
    out.list.add(outY);
    element.setPinOutputReference(0,out);

    setName("Audio-In");
  }
  

  public void initInputPins()
  {
    zoomX=(VSDouble)element.getPinInputReference(1);
    zoomY=(VSDouble)element.getPinInputReference(2);

    if (zoomX==null)
    {
      zoomX=new VSDouble();
      zoomX.setValue(1.0);
    }
    if (zoomY==null)
    {
      zoomY=new VSDouble();
      zoomY.setValue(1.0);
    }

  }

  public void initOutputPins()
  {
    element.setPinOutputReference(0,out);
  }


  public void process()
  {
     if (targetDataLine!=null)
     {
        int x=0;

        try
        {
            cnt = targetDataLine.read(tempBuffer,0,tempBuffer.length);
        }catch (Exception e) { System.out.println(e);  }
        if (cnt>0)
        {
          for (int i=0;i<tempBuffer.length;i+=2)
          {
            int level;
            //level = (tempBuffer[i]<<16)&tempBuffer[i+1];
            //level = (tempBuffer[i+1]<<16)&tempBuffer[i];

            //level = (tempBuffer[i+1]>>8)&tempBuffer[i];
            level=tempBuffer[i+1];
            value=(double)level*zoomY.getValue();
            outX.setValue(x,(double)x*zoomX.getValue());
            outY.setValue(x,value);
            oldValue=outY.getValue(x);
            out.setChanged(true);
            x++;
          }
        }
      }
  }
  
  public void start()
  {
    stopCapture=false;
    captureAudio();
  }
  
  public void stop()
  {
    stopCapture=true;
  }

}

